name: Lab 3 Deploy a Node.js App to an Azure VM

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 22.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build the application (optional)
        run: |
          npm run build 2>/dev/null || echo "No build script found, skipping build step"

      - name: Create deployment package
        run: |
          set -euo pipefail
          STAGING="$GITHUB_WORKSPACE/deployment-package"
          rm -rf "$STAGING"
          mkdir -p "$STAGING"

          [ -d public ] && cp -r public "$STAGING/" || echo "No public/ directory found"
          [ -d node_modules ] && cp -r node_modules "$STAGING/" || echo "No node_modules/ directory found"
          [ -f server.js ] && cp server.js "$STAGING/" || echo "No server.js found"
          cp package.json "$STAGING/"
          cp package-lock.json "$STAGING/"
          [ -f README.md ] && cp README.md "$STAGING/" || true
          [ -f Dockerfile ] && cp Dockerfile "$STAGING/" || echo "No Dockerfile found"

          (cd "$STAGING" && npm pkg delete devDependencies || true)

          TS="$(date +%Y%m%d-%H%M%S)"
          SHORT_SHA="${GITHUB_SHA::7}"
          ZIP_NAME="deployment-package-${SHORT_SHA}-${TS}.zip"
          (cd "$GITHUB_WORKSPACE" && zip -r "$ZIP_NAME" "deployment-package")
          echo "ZIP_NAME=$ZIP_NAME" >> "$GITHUB_ENV"

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload package to Blob
        uses: azure/cli@v2.1.0
        env:
          ZIP_NAME: ${{ env.ZIP_NAME }}
          AZ_STORAGE_ACCOUNT: ${{ secrets.AZ_STORAGE_ACCOUNT }}
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}
          AZ_STORAGE_KEY: ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            set -euo pipefail
            AZ_STORAGE_KEY="$(printf %s "$AZ_STORAGE_KEY" | tr -d '\r\n')"
            export AZ_STORAGE_KEY

            az storage container create \
              --name "$AZ_STORAGE_CONTAINER" \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --only-show-errors 1>/dev/null

            az storage blob upload \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --file "$ZIP_NAME" \
              --name "$ZIP_NAME" \
              --overwrite true \
              --only-show-errors

            SAS=$(az storage blob generate-sas \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --name "$ZIP_NAME" \
              --permissions r \
              --expiry "$(date -u -d '+1 hour' '+%Y-%m-%dT%H:%MZ')" \
              --https-only --full-uri -o tsv)

            echo "::add-mask::$SAS"
            echo "PACKAGE_SAS_URL=$SAS" >> "$GITHUB_ENV"

      - name: Create deploy script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          APP_DIR="/opt/myapp"
          APP_USER="noura"
          APP_NAME="myapp"
          PACKAGE_URL="$1"

          command -v node >/dev/null 2>&1 || { curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -; sudo apt-get install -y nodejs; }
          command -v pm2 >/dev/null 2>&1 || sudo npm install -g pm2
          command -v unzip >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y unzip; }

          sudo mkdir -p "$APP_DIR/releases" "$APP_DIR/current"
          sudo chown -R "$APP_USER:$APP_USER" "$APP_DIR"

          TMP_ZIP="/tmp/app.zip"
          curl -fSL "$PACKAGE_URL" -o "$TMP_ZIP"

          RELEASE_DIR="$APP_DIR/releases/$(date +%Y%m%d-%H%M%S)"
          sudo mkdir -p "$RELEASE_DIR"
          sudo unzip -o "$TMP_ZIP" -d "$RELEASE_DIR"

          [ -d "$RELEASE_DIR/deployment-package" ] && sudo mv "$RELEASE_DIR/deployment-package/"* "$RELEASE_DIR/" && sudo rmdir "$RELEASE_DIR/deployment-package"
          sudo chown -R "$APP_USER:$APP_USER" "$RELEASE_DIR"

          [ -f "$RELEASE_DIR/package.json" ] && sudo -u "$APP_USER" bash -c "cd '$RELEASE_DIR' && npm install --omit=dev"

          sudo rm -rf "$APP_DIR/current"
          sudo ln -s "$RELEASE_DIR" "$APP_DIR/current"

          sudo -u "$APP_USER" pm2 stop "$APP_NAME" 2>/dev/null || true
          sudo -u "$APP_USER" pm2 delete "$APP_NAME" 2>/dev/null || true
          sudo -u "$APP_USER" pm2 start "$APP_DIR/current/server.js" --name "$APP_NAME" --no-daemon
          sudo -u "$APP_USER" pm2 save
          rm -f "$TMP_ZIP"
          EOF

      - name: Upload and run deploy script
        uses: azure/cli@v2.1.0
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}
          PACKAGE_SAS_URL: ${{ env.PACKAGE_SAS_URL }}
        with:
          inlineScript: |
            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "cat > /tmp/deploy.sh << 'DEPLOY_EOF'
            $(cat deploy.sh)
            DEPLOY_EOF
            chmod +x /tmp/deploy.sh"

            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "sudo /tmp/deploy.sh '$PACKAGE_SAS_URL'"
